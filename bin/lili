#!/usr/bin/env ruby

require 'rubygems'
require 'find'
require 'optparse'
require 'dotsmack'
require 'yaml'
require 'lili'
require 'json'
require 'stat'

def main
    ignores = DEFAULT_IGNORES

    configuration_flags = {}

    is_stat = false

    option = OptionParser.new do |option|
        option.banner = 'Usage: lili [options] [<files>]'

        option.on('-i', '--ignore pattern', 'Ignore file pattern (fnmatch)') do |pattern|
            ignores << pattern
        end

        option.on('-h', '--help', 'Print usage info') do
            puts option
            exit
        end

        option.on('-s', '--stat', 'Output in STAT') do
            is_stat = true
        end

        option.on('-v', '--version', 'Print version info') do
            puts "lili #{LiLi::VERSION}"
            exit
        end
    end

    option.parse!

    filenames =
    if ARGV == []
        ['.']
    else
        ARGV
    end

    dotsmack = Dotsmack::Smacker.new(
        dotignore = '.lili-ignore',
        additional_ignores = ignores,
        dotconfig = '.lili-rc.yml'
    )

    findings = []

    dotsmack.enumerate(filenames).each do |filename, config|
        config =
        if config.nil?
            DEFAULT_CONFIGURATION.merge(configuration_flags)
        else
            DEFAULT_CONFIGURATION.merge(YAML.load(config)).merge(configuration_flags)
        end

        if !is_stat
            check(filename, config, is_stat)
        else
            check(filename, config, is_stat) { |finding|
                findings.push(finding) unless finding.nil?
            }
        end
    end
    if is_stat
        process = StatModule::Process.new('Line Ending Linter')
        process.version = "#{LiLi::VERSION}"
        process.description = 'lili searches your source code files for strange line endings that may cause issues with software interoperability'
        process.maintainer = 'Andrew Pennebaker'
        process.email = 'andrew.pennebaker@gmail.com'
        process.website = 'https://github.com/mcandre/lili'
        process.repeatability = 'Associative'
        stat = StatModule::Stat.new(process)
        stat.findings = findings
        puts stat.to_json
    end
end

begin
    main
    # User may quit lili before completion.
rescue Interrupt
    nil
    # lili may be piped to another program (e.g. `less`),
    # which is quit before lili completes.
rescue Errno::EPIPE, Errno::EMFILE
    nil
end
